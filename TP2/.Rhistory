}
R_adj <- function(Y, Y_hat, X){ #where X is predictor variables
n = dim(X)[1]
p = dim(X)[2]
TSS = sum((Y-mean(Y))^2)
RSS = sum((Y-Y_hat)^2)
return (1 - ((RSS*(n-1)) / (TSS*(n-p))) )
}
R_sqr(Y, Yridge)
MSE(Y, Yridge)
MSE(Y, Yridge)
MSE(Y, Yridge)
mse_ridge <- MSE(Y, Yridge)
cat("MSE:", mse_ridge)
?glmnet()
#An Introduction to Statistical Learning with Applications in R
grid <- 10^seq(10, -2, length = 100)
lasso_mod <- glmnet(as.matrix(X), Y, alpha = 1, lambda = grid)
plot(lasso_mod)
cv_out <- cv.glmnet(as.matrix(X), Y, alpha = 1, lambda = grid)
plot(cv_out)
best_lambda <- cv_out$lambda.min
best_lambda
cv_out <- cv.glmnet(as.matrix(X), Y, alpha = 1, lambda = grid)
plot(cv_out)
cv_out$lambda
cv_out <- cv.glmnet(as.matrix(X), Y, alpha = 1, lambda = grid)
plot(cv_out)
cv_out <- cv.glmnet(as.matrix(X), Y, alpha = 1, lambda = grid)
best_lambda_lasso <- cv_out$lambda.min
plot(cv_out)
best_lasso <- glmnet(as.matrix(X), Y, alpha = 1, lambda = best_lambda)
lasso_coef <- coef(best_lasso)
cv_out <- cv.glmnet(as.matrix(X), Y, alpha = 1, lambda = grid)
plot(cv_out)
best_lambda_lasso <- cv_out$lambda.min
best_lambda_lasso <- cv_out$lambda.min
cat("Best lambda for lasso:", best_lambda_lasso)
best_lasso <- glmnet(as.matrix(X), Y, alpha = 1, lambda = best_lambda)
lasso_coef <- coef(best_lasso)
lasso_mod <- glmnet(as.matrix(X), Y, alpha = 1, lambda = grid)
plot(lasso_mod)
plot(coef(lasso_mod))
lasso_mod <- glmnet(as.matrix(X), Y, alpha = 1, lambda = grid)
plot(lasso_mod)
plot(lasso_mod$lambda, coef(lasso_mod))
lasso_mod <- glmnet(as.matrix(X), Y, alpha = 1, lambda = grid)
plot(lasso_mod)
lasso_mod$lambda
lasso_mod <- glmnet(as.matrix(X), Y, alpha = 1, lambda = grid)
plot(lasso_mod)
best_lasso <- glmnet(as.matrix(X), Y, alpha = 1, lambda = best_lambda)
best_lasso_coef <- coef(best_lasso)
lasso_coef
best_lasso <- glmnet(as.matrix(X), Y, alpha = 1, lambda = best_lambda)
best_lasso_coef <- coef(best_lasso)
predict(glmnet(as.matrix(X), Y, alpha = 1, lambda = grid), type = "coefficients", s = 0.01)
best_lasso <- glmnet(as.matrix(X), Y, alpha = 1, lambda = best_lambda)
best_lasso_coef <- coef(best_lasso)
predict(glmnet(as.matrix(X), Y, alpha = 1, lambda = grid), type = "coefficients", s = 0.01)
best_lasso_coef
best_lasso <- glmnet(as.matrix(X), Y, alpha = 1, lambda = best_lambda)
best_lasso_coef <- coef(best_lasso)
#predict(glmnet(as.matrix(X), Y, alpha = 1, lambda = grid), type = "coefficients", s = 0.01)
as.numeric(best_lasso_coef)
best_lasso <- glmnet(as.matrix(X), Y, alpha = 1, lambda = best_lambda)
best_lasso_coef <- as.numeric(coef(best_lasso))
#predict(glmnet(as.matrix(X), Y, alpha = 1, lambda = grid), type = "coefficients", s = 0.01)
best_lasso <- glmnet(as.matrix(X), Y, alpha = 1, lambda = best_lambda)
best_lasso_coef <- as.numeric(coef(best_lasso))
best_lasso_coef <- best_lasso_coef[best_lasso_coef != 0]
#predict(glmnet(as.matrix(X), Y, alpha = 1, lambda = grid), type = "coefficients", s = 0.01)
best_lasso <- glmnet(as.matrix(X), Y, alpha = 1, lambda = best_lambda)
best_lasso_coef <- as.numeric(coef(best_lasso))
best_lasso_coef <- best_lasso_coef[best_lasso_coef != 0]
#predict(glmnet(as.matrix(X), Y, alpha = 1, lambda = grid), type = "coefficients", s = 0.01)
best_lasso_coef
best_lasso <- glmnet(as.matrix(X), Y, alpha = 1, lambda = best_lambda)
best_lasso_coef <- as.numeric(coef(best_lasso))
best_lasso_coef <- best_lasso_coef[best_lasso_coef != 0]
tmp = predict(glmnet(as.matrix(X), Y, alpha = 1, lambda = grid), type = "coefficients", s = 0.01)
best_lasso <- glmnet(as.matrix(X), Y, alpha = 1, lambda = best_lambda)
best_lasso_coef <- as.numeric(coef(best_lasso))
best_lasso_coef <- best_lasso_coef[best_lasso_coef != 0]
tmp = predict(glmnet(as.matrix(X), Y, alpha = 1, lambda = grid), type = "coefficients", s = 0.01)
tmp = as.numeric(tmp)
tmp = tmp[tmp != 0]
best_lasso <- glmnet(as.matrix(X), Y, alpha = 1, lambda = best_lambda)
best_lasso_coef <- as.numeric(coef(best_lasso))
best_lasso_coef <- best_lasso_coef[best_lasso_coef != 0]
tmp = predict(glmnet(as.matrix(X), Y, alpha = 1, lambda = grid), type = "coefficients", s = 0.01)
tmp = as.numeric(tmp)
tmp = tmp[tmp != 0]
tmp
best_lasso <- glmnet(as.matrix(X), Y, alpha = 1, lambda = best_lambda)
best_lasso_coef <- as.numeric(coef(best_lasso))
best_lasso_coef <- best_lasso_coef[best_lasso_coef != 0]
tmp = predict(glmnet(as.matrix(X), Y, alpha = 1, lambda = grid), type = "coefficients", s = 0.01)
tmp = as.numeric(tmp)
tmp = tmp[tmp != 0]
tmp
best_lasso_coef
best_lasso <- glmnet(as.matrix(X), Y, alpha = 1, lambda = best_lambda)
best_lasso_coef <- as.numeric(coef(best_lasso))
best_lasso_coef <- best_lasso_coef[best_lasso_coef != 0]
best_lasso <- glmnet(as.matrix(X), Y, alpha = 1, lambda = best_lambda)
best_lasso_coef <- as.numeric(coef(best_lasso))
best_lasso_coef <- best_lasso_coef[best_lasso_coef != 0]
length(best_lasso_coef)
best_lasso <- glmnet(as.matrix(X), Y, alpha = 1, lambda = best_lambda)
best_lasso_coef <- as.numeric(coef(best_lasso))
length(best_lasso_coef)
best_lasso_coef <- best_lasso_coef[best_lasso_coef != 0]
length(best_lasso_coef)
best_lasso <- glmnet(as.matrix(X), Y, alpha = 1, lambda = best_lambda)
best_lasso_coef <- as.numeric(coef(best_lasso))
best_lasso_coef
length(best_lasso_coef)
best_lasso_coef <- best_lasso_coef[best_lasso_coef != 0]
length(best_lasso_coef)
best_lasso <- glmnet(as.matrix(X), Y, alpha = 1, lambda = best_lambda)
best_lasso_coef <- as.numeric(coef(best_lasso))
length(best_lasso_coef)
best_lasso_coef <- best_lasso_coef[best_lasso_coef != 0]
length(best_lasso_coef)
best_lasso <- glmnet(as.matrix(X), Y, alpha = 1, lambda = best_lambda)
best_lasso_coef <- as.numeric(coef(best_lasso))
best_lasso_coef <- best_lasso_coef[best_lasso_coef != 0]
length(best_lasso_coef)
best_lasso <- glmnet(as.matrix(X), Y, alpha = 1, lambda = best_lambda)
best_lasso_coef <- as.numeric(coef(best_lasso))
best_lasso_coef <- best_lasso_coef[best_lasso_coef != 0]
inter_lasso <- best_lasso_coef[1]
length(best_lasso_coef)
inter_lasso
best_lasso <- glmnet(as.matrix(X), Y, alpha = 1, lambda = best_lambda)
best_lasso_coef <- coef(best_lasso)
best_lasso <- glmnet(as.matrix(X), Y, alpha = 1, lambda = best_lambda)
best_lasso_coef <- coef(best_lasso)
best_lasso_coef
best_lasso <- glmnet(as.matrix(X), Y, alpha = 1, lambda = best_lambda)
best_lasso_coef <- as.numeric(coef(best_lasso))
best_lasso_coef <- best_lasso_coef[best_lasso_coef != 0]
inter_lasso <- best_lasso_coef[1]
length(best_lasso_coef)
inter_lasso
best_lasso <- glmnet(as.matrix(X), Y, alpha = 1, lambda = best_lambda)
best_lasso_coef <- as.numeric(coef(best_lasso)) #set as numeric values
best_lasso_coef <- best_lasso_coef[best_lasso_coef != 0] #eliminate 0 to see how many variables were selected
inter_lasso <- best_lasso_coef[1]
cat("Number of beta remaining: ", length(best_lasso_coef))
cat("Number of beta remaining: ", length(best_lasso_coef))
cat("Intercept: " inter_lasso)
cat("Number of beta remaining: ", length(best_lasso_coef))
cat("Intercept:", inter_lasso)
cat("Number of beta remaining: ", length(best_lasso_coef), "\n")
cat("Intercept:", inter_lasso)
?reslasso
?reslasso()
?lars()
#use.Grame = FALSE for large p = 700
reslasso = lars(as.matrix(X), as.matrix(Y) ,type="lasso", use.Gram = FALSE)
plot(reslasso)
plot(reslasso$lambda)
reslasso$lambda
reslasso$lambda.min
coef = predict.lars(reslasso, as.matrix(X), type="coefficients", mode="lambda", s=0)
Ylasso = predict.lars(reslasso, as.matrix(X), type="fit" , mode="lambda", s=best_lambda)
coef = predict.lars(reslasso, as.matrix(X), type="coefficients", mode="lambda", s=0)
Ylasso = predict.lars(reslasso, as.matrix(X), type="fit" , mode="lambda", s=best_lambda)
coef
coef = predict.lars(reslasso, as.matrix(X), type="coefficients", mode="lambda", s=0)
Ylasso = predict.lars(reslasso, as.matrix(X), type="fit" , mode="lambda", s=best_lambda)
coef$coefficients
coef = predict.lars(reslasso, as.matrix(X), type="coefficients", mode="lambda", s=0)
Ylasso = predict.lars(reslasso, as.matrix(X), type="fit" , mode="lambda", s=best_lambda)
length(coef$coefficients)
coef = predict.lars(reslasso, as.matrix(X), type="coefficients", mode="lambda", s=0)
Ylasso = predict.lars(reslasso, as.matrix(X), type="fit" , mode="lambda", s=best_lambda)
length(coef$coefficients[coef$coefficients != 0])
coef = predict.lars(reslasso, as.matrix(X), type="coefficients", mode="lambda", s=0.01)
Ylasso = predict.lars(reslasso, as.matrix(X), type="fit" , mode="lambda", s=best_lambda)
length(coef$coefficients[coef$coefficients != 0])
#use.Grame = FALSE for large p = 700
reslasso = lars(as.matrix(X), as.matrix(Y) ,type="lasso", use.Gram = FALSE)
#use.Grame = FALSE for large p = 700
reslasso = lars(as.matrix(X), as.matrix(Y) ,type="lasso", use.Gram = FALSE)
Ylasso = predict.lars(reslasso, as.matrix(X), type="fit" , mode="lambda", s=best_lambda)
#use.Grame = FALSE for large p = 700
reslasso = lars(as.matrix(X), as.matrix(Y) ,type="lasso", use.Gram = FALSE)
Ylasso = predict.lars(reslasso, as.matrix(X), type="fit" , mode="lambda", s=best_lambda)
Ylasso
best_lambda_lasso <- cv_out$lambda.min
cat("Best lambda for lasso:", best_lambda_lasso)
best_lambda_lasso <- cv_out$lambda.min
cat("Best lambda for lasso:", best_lambda_lasso)
#use.Grame = FALSE for large p = 700
reslasso = lars(as.matrix(X), as.matrix(Y) ,type="lasso", use.Gram = FALSE)
Ylasso = predict.lars(reslasso, as.matrix(X), type="fit" , mode="lambda", s=best_lambda_lasso)
Ylasso
#use.Grame = FALSE for large p = 700
reslasso <- lars(as.matrix(X), as.matrix(Y) ,type="lasso", use.Gram = FALSE)
Ylasso <- predict.lars(reslasso, as.matrix(X), type="fit" , mode="lambda", s=best_lambda_lasso)
Ylasso <- Ylasso$fit
MSE(Y, Ylasso$fit)
#use.Grame = FALSE for large p = 700
reslasso <- lars(as.matrix(X), as.matrix(Y) ,type="lasso", use.Gram = FALSE)
Ylasso <- predict.lars(reslasso, as.matrix(X), type="fit" , mode="lambda", s=best_lambda_lasso)
Ylasso <- Ylasso$fit
MSE(Y, Ylasso)
#use.Grame = FALSE for large p = 700
reslasso <- lars(as.matrix(X), as.matrix(Y) ,type="lasso", use.Gram = FALSE)
Ylasso <- predict.lars(reslasso, as.matrix(X), type="fit" , mode="lambda", s=best_lambda_lasso)
Ylasso <- Ylasso$fit
MSE(Y, Ylasso)
mse_lasso <- MSE(Y, Ylasso)
cat("MSE of lasso: ", mse_lasso)
mse_lasso <- MSE(Y, Ylasso)
cat("Lasso's MSE: ", mse_lasso)
#use.Grame = FALSE for large p = 700
#lars() input args are both matrix
reslasso <- lars(as.matrix(X), as.matrix(Y) ,type="lasso", use.Gram = FALSE)
Ylasso <- predict.lars(reslasso, as.matrix(X), type="fit" , mode="lambda", s=best_lambda_lasso)
Ylasso <- Ylasso$fit
reslasso
#use.Grame = FALSE for large p = 700
#lars() input args are both matrix
reslasso <- lars(as.matrix(X), as.matrix(Y) ,type="lasso", use.Gram = FALSE)
Ylasso <- predict.lars(reslasso, as.matrix(X), type="fit" , mode="lambda", s=best_lambda_lasso)
Ylasso <- Ylasso$fit
mse_lasso
mse_ridge
cat("Ridge's MSE", mse_ridge)
cat("Lasso's MSE", mse_lasso)
cat("Ridge's MSE", mse_ridge, "    ")
cat("Lasso's MSE", mse_lasso)
cat("Ridge's MSE", mse_ridge)
cat("Lasso's MSE", mse_lasso)
predict(best_lasso, s=0.01, tab)
predict(best_lasso, s=0.01, X)
predict(best_lasso, s=0.01, as.matrix(X))
?predict()
Y - predict(best_lasso, s=0.01, as.matrix(X))
predict(best_lasso, s=0.01, as.matrix(X))
predict(best_lasso, s=0.01, as.matrix(X))
Ylasso
?predict.lars()
plot(Y, Ylasso)
abline(0, 1)
# Assuming Y and predicted_y are your observed and predicted values
plot(Y, predicted_y, xlab = "Observed (Y)", ylab = "Predicted (Y-hat)", main = "Observed vs. Predicted")
# Assuming Y and predicted_y are your observed and predicted values
plot(Y, Ylasso, xlab = "Observed values", ylab = "Predicted values", main = "Observed vs. Predicted of Lasso", col = "cadetblue2")
abline(0, 1, col = "red")
# Assuming Y and predicted_y are your observed and predicted values
plot(Y, Ylasso, xlab = "Observed values", ylab = "Predicted values", main = "Observed vs. Predicted of Lasso", col = "cadetblue3")
abline(0, 1, col = "red")
# Assuming Y and predicted_y are your observed and predicted values
plot(Y, Ylasso, xlab = "Observed values", ylab = "Predicted values", main = "Observed vs. Predicted of Lasso", col = "cadetblue3", pch = 20)
abline(0, 1, col = "red")
# Assuming Y and predicted_y are your observed and predicted values
plot(Y, Ylasso, xlab = "Observed values", ylab = "Predicted values", main = "Observed vs. Predicted of Lasso", col = "cadetblue3", pch = 20)
abline(0, 1, col = "red")
ggplot(data.frame(Y, Ylasso), aes(x = Y, y = Ylasso)) +
geom_point(color = "cadetblue3") +
geom_abline(intercept = 0, slope = 1, color = "brown1") +
labs(title = "Observed vs. Predicted of Lasso", x = "Observed Fat",
y = "Predicted Fat")
lasso_residual <- Y - Ylasso
ggplot(data.frame(Ylasso, lasso_residual), aes(x = Ylasso, y = lasso_residual)) +
geom_point(color = "brown3") +
geom_hline(yintercept = 0) +
labs(title = "Residual Graph of Lasso", x = "Predicted Fat", y = "Residuals")
ggplot(data.frame(Y, Yridge), aes(x = Y, y = Yridge)) +
geom_point(color = "cadetblue3") +
geom_abline(intercept = 0, slope = 1, color = "brown1") +
labs(title = "Observed vs. Predicted of Ridge", x = "Observed Fat",
y = "Predicted Fat")
ridge_residuals <- Y - Yridge
ggplot(data.frame(Yridge, ridge_residuals), aes(x = Yridge, y = ridge_residuals)) +
geom_point(color = "brown3") +
geom_hline(yintercept = 0) +
labs(title = "Residual Graph of Ridge", x = "Predicted Fat", y = "Residuals")
#implementation of certain functions for later usage
MSE <- function(Y, Y_hat){
obs = length(Y)
return ((1/obs) * sum((Y-Y_hat)^2))
}
RMSE <- function(Y, Y_hat){
obs = length(Y)
MSE = (1/obs) * sum((Y-Y_hat)^2)
return (sqrt(MSE))
}
R_sqr <- function(Y, Y_hat){
TSS = sum((Y-mean(Y))^2)
RSS = sum((Y-Y_hat)^2)
return (1 - (RSS/TSS))
}
R_adj <- function(Y, Y_hat, X){ #where X is predictor variables
n = dim(X)[1]
p = dim(X)[2]
TSS = sum((Y-mean(Y))^2)
RSS = sum((Y-Y_hat)^2)
return (1 - ((RSS*(n-1)) / (TSS*(n-p))) )
}
R_adj(Y, Yridge, X)
R_adj(Y, Ylasso, X)
tab <- read.csv(file = 'cookies.csv', header = TRUE, sep = ',')
Y <- tab$fat
X <- subset(tab, select = -fat)
dim(X)
R_adj(Y, Ylasso, X)
R_sqr(Y, Ylasso)
X
X
Y
Ylasso
Yridge
#by using the MSE() function implemented above (do not include when knitting)
mse_ridge <- MSE(Y, Yridge)
cat("MSE:", mse_ridge)
?glmnet()
#An Introduction to Statistical Learning with Applications in R
grid <- 10^seq(10, -2, length = 100)
X
#An Introduction to Statistical Learning with Applications in R
grid <- 10^seq(10, -2, length = 100)
lasso_mod <- glmnet(as.matrix(X), Y, alpha = 1, lambda = grid)
plot(lasso_mod)
Ylasso
Ylasso
predict(best_lasso, s = best_lambda_lasso, newx = Y)
predict(best_lasso, s = best_lambda_lasso, newx = X)
predict(best_lasso, s = best_lambda_lasso, newx = as.matrix(X))
Y - predict(best_lasso, s = best_lambda_lasso, newx = as.matrix(X))
plot(Y, predict(best_lasso, s = best_lambda_lasso, newx = as.matrix(X)), pch = 20)
plot(Y, predict(best_lasso, s = best_lambda_lasso, newx = as.matrix(X)), pch = 20)
abline(0,1)
set.seed(123)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
graphics.off()
library(ggplot2)
library(glmnet)
library(lars)
library(MASS)
best_lasso <- glmnet(as.matrix(X), Y, alpha = 1, lambda = best_lambda_lasso)
set.seed(123)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
graphics.off()
library(ggplot2)
library(glmnet)
library(lars)
library(MASS)
#implementation of certain functions for later usage
MSE <- function(Y, Y_hat){
obs = length(Y)
return ((1/obs) * sum((Y-Y_hat)^2))
}
RMSE <- function(Y, Y_hat){
obs = length(Y)
MSE = (1/obs) * sum((Y-Y_hat)^2)
return (sqrt(MSE))
}
R_sqr <- function(Y, Y_hat){
TSS = sum((Y-mean(Y))^2)
RSS = sum((Y-Y_hat)^2)
return (1 - (RSS/TSS))
}
R_adj <- function(Y, Y_hat, X){ #where X is predictor variables
n = dim(X)[1]
p = dim(X)[2]
TSS = sum((Y-mean(Y))^2)
RSS = sum((Y-Y_hat)^2)
return (1 - ((RSS*(n-1)) / (TSS*(n-p))) )
}
tab <- read.csv(file = 'cookies.csv', header = TRUE, sep = ',')
Y <- tab$fat
X <- subset(tab, select = -fat)
corr_matrix <- cor(tab)
length(corr_matrix)
threshold <- 0.9 # 0.9 for a really strong correlation between variables
corr_matrix <- corr_matrix[corr_matrix > threshold]
length(corr_matrix)
library(leaps)
regForward <- regsubsets(fat~., tab, method = "forward")
ridge_mod <- lm.ridge(fat~., data = tab, lambda = seq(0, 10, 0.01))
plot(ridge_mod)
plot(ridge_mod$lambda, ridge_mod$GCV, pch = 20, col = "cadetblue")
best_lambda_ridge <- ridge_mod$lambda[which.min(ridge_mod$GCV)] #OR
#select(lm.ridge(tab$fat~., data = tab, lambda = seq(0, 10, 0.01)))
cat("Best lambda value:", best_lambda_ridge)
best_ridge <- lm.ridge(fat~., data = tab, lambda = best_lambda_ridge)
best_ridge_coef <- coef(best_ridge)
inter_ridge <- best_ridge_coef[1]
cat("Intercept:", inter_ridge)
Yridge <- (as.matrix(X) %*% as.vector(best_ridge_coef)[2:length(best_ridge_coef)])+inter_ridge
#OR cbind(matrix(1, nrow = nrow(tab), ncol = 1), as.matrix(X)) %*% as.vector(best_coef)
ggplot(data.frame(Y, Yridge), aes(x = Y, y = Yridge)) +
geom_point(color = "cadetblue3") +
geom_abline(intercept = 0, slope = 1, color = "brown1") +
labs(title = "Observed vs. Predicted of Ridge", x = "Observed Fat",
y = "Predicted Fat")
ridge_residuals <- Y - Yridge
ggplot(data.frame(Yridge, ridge_residuals), aes(x = Yridge, y = ridge_residuals)) +
geom_point(color = "brown3") +
geom_hline(yintercept = 0) +
labs(title = "Residual Graph of Ridge", x = "Predicted Fat", y = "Residuals")
#by using the MSE() function implemented above (do not include when knitting)
mse_ridge <- MSE(Y, Yridge)
cat("MSE:", mse_ridge)
#An Introduction to Statistical Learning with Applications in R
grid <- 10^seq(10, -2, length = 100)
lasso_mod <- glmnet(as.matrix(X), Y, alpha = 1, lambda = grid)
plot(lasso_mod)
cv_out <- cv.glmnet(as.matrix(X), Y, alpha = 1, lambda = grid)
plot(cv_out)
best_lambda_lasso <- cv_out$lambda.min
cat("Best lambda for lasso:", best_lambda_lasso)
best_lasso <- glmnet(as.matrix(X), Y, alpha = 1, lambda = best_lambda_lasso)
best_lasso_coef <- as.numeric(coef(best_lasso)) #set as numeric values
best_lasso_coef <- best_lasso_coef[best_lasso_coef != 0] #see how many variables were selected
inter_lasso <- best_lasso_coef[1]
cat("Number of beta remaining: ", length(best_lasso_coef), "\n")
cat("Intercept:", inter_lasso)
#use.Grame = FALSE for large p = 700
#lars() input args are both matrix
reslasso <- lars(as.matrix(X), as.matrix(Y) ,type="lasso", use.Gram = FALSE)
Ylasso <- predict.lars(reslasso, as.matrix(X), type="fit" , mode="lambda", s=best_lambda_lasso)
Ylasso <- Ylasso$fit
# OR Ylasso <- predict(best_lasso, s = best_lambda_lasso, newx = as.matrix(X))
ggplot(data.frame(Y, Ylasso), aes(x = Y, y = Ylasso)) +
geom_point(color = "cadetblue3") +
geom_abline(intercept = 0, slope = 1, color = "brown1") +
labs(title = "Observed vs. Predicted of Lasso", x = "Observed Fat",
y = "Predicted Fat")
lasso_residual <- Y - Ylasso
ggplot(data.frame(Ylasso, lasso_residual), aes(x = Ylasso, y = lasso_residual)) +
geom_point(color = "brown3") +
geom_hline(yintercept = 0) +
labs(title = "Residual Graph of Lasso", x = "Predicted Fat", y = "Residuals")
mse_lasso <- MSE(Y, Ylasso)
cat("Lasso's MSE: ", mse_lasso)
cat("Ridge's MSE", mse_ridge)
cat("Lasso's MSE", mse_lasso)
best_lasso <- glmnet(as.matrix(X), Y, alpha = 1, lambda = best_lambda_lasso)
best_lasso_coef <- as.numeric(coef(best_lasso)) #set as numeric values
best_lasso_coef <- best_lasso_coef[best_lasso_coef != 0] #see how many variables were selected
inter_lasso <- best_lasso_coef[1]
coef(best_lasso)
as.numeric(coef(best_lasso))
coef(best_lasso)
coef(best_lasso)[1]
coef(best_lasso)[2]
coef(best_lasso)
coef(best_lasso)[coef(best_lasso) != 0]
coef(best_lasso)
coef(best_lasso)
rownames(coef(best_lasso))
rownames(coef(best_lasso))
rownames(coef(best_lasso))[which(coef(best_lasso[, "s0"])) != 0]
rownames(coef(best_lasso))[which(coef(best_lasso)[, "s0"] != 0)]
rownames(coef(best_lasso))[which(coef(best_lasso)[1, "s0"] != 0)]
rownames(coef(best_lasso))[which(coef(best_lasso)[, "s0"] != 0)]
rownames(coef(best_lasso))[which(coef(best_lasso)[2:, "s0"] != 0)]
rownames(coef(best_lasso))[which(coef(best_lasso)[2:.., "s0"] != 0)]
rownames(coef(best_lasso))[which(coef(best_lasso)[2:length(coef(best_lasso)), "s0"] != 0)]
rownames(coef(best_lasso))[which(coef(best_lasso)[2:length(coef(best_lasso)), "s0"] != 0)]
best_lasso <- glmnet(as.matrix(X), Y, alpha = 1, lambda = best_lambda_lasso)
best_lasso_coef <- as.numeric(coef(best_lasso)) #set as numeric values
best_lasso_coef <- best_lasso_coef[best_lasso_coef != 0] #see how many variables were selected
inter_lasso <- best_lasso_coef[1]
rownames(coef(best_lasso))[which(coef(best_lasso)[, "s0"] != 0)]
rownames(coef(best_lasso))[which(coef(best_lasso)[, "s0"] != 0)]
best_lasso_coef
rownames(coef(best_lasso))[which(coef(best_lasso)[, "s0"] != 0)]
rownames(coef(best_lasso))[which(coef(best_lasso)[, "s0"] != 0)]
as.numeric(coef(best_lasso))
rownames(coef(best_lasso))[which(coef(best_lasso)[, "s0"] != 0)]
best_lasso <- glmnet(as.matrix(X), Y, alpha = 1, lambda = best_lambda_lasso)
best_lasso_coef <- as.numeric(coef(best_lasso)) #set as numeric values
best_lasso_coef <- best_lasso_coef[best_lasso_coef != 0] #see how many variables were selected
inter_lasso <- best_lasso_coef[1]
rownames(coef(best_lasso))[which(coef(best_lasso)[, "s0"] != 0)]
best_lasso
rownames(coef(best_lasso))[which(coef(best_lasso)[, "s0"] != 0)]
best_lasso_coef
best_lasso <- glmnet(as.matrix(X), Y, alpha = 1, lambda = best_lambda_lasso)
best_lasso_coef <- as.numeric(coef(best_lasso)) #set as numeric values
best_lasso_coef <- best_lasso_coef[best_lasso_coef != 0] #see how many variables were selected
inter_lasso <- best_lasso_coef[1]
variables_remain <- rownames(coef(best_lasso))[which(coef(best_lasso)[, "s0"] != 0)]
best_lasso <- glmnet(as.matrix(X), Y, alpha = 1, lambda = best_lambda_lasso)
best_lasso_coef <- as.numeric(coef(best_lasso)) #set as numeric values
best_lasso_coef <- best_lasso_coef[best_lasso_coef != 0] #see how many variables were selected
inter_lasso <- best_lasso_coef[1]
lasso_variables_remain <- rownames(coef(best_lasso))[which(coef(best_lasso)[, "s0"] != 0)]
cat("Number of beta remaining: ", length(best_lasso_coef), "\n", lasso_variables_remain)
cat("Intercept:", inter_lasso)
cat("Number of beta remaining: ", length(best_lasso_coef), "\n")
cat("Intercept:", inter_lasso)
cat("Intercept:", inter_lasso)
lasso_variables_remain
cat("Number of variables remaining:", length(best_lasso_coef) - 1, "\n")
cat("Intercept:", inter_lasso)
cat("Number of variables remaining (without intercept):", length(best_lasso_coef) - 1, "\n")
cat("Intercept:", inter_lasso)
cat("Number of coefficients remaining (without intercept):", length(best_lasso_coef) - 1, "\n")
cat("Intercept:", inter_lasso)
cat("Number of coefficients remaining (without intercept):", length(best_lasso_coef) - 1, "\n")
cat("Intercept:", inter_lasso)
